akka {
  loglevel = info
  
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    warn-about-java-serializer-usage = on
    
    # cap default-dispatcher to constraint resources
    #default-dispatcher {
    #  fork-join-executor {
    #    # max num of threads
    #    parallelism-max = 2
    #  }
    #}
    
    serializers {
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "com.javaigua.stocks.actors.StockRegistryMessages" = proto
    }
  }
  
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = ${clustering.ip}
      port = ${clustering.port}
    }
  }

  cluster {
    log-info = on
    seed-nodes = [
      "akka.tcp://"${application.name}"@"${clustering.ip}":"${clustering.port}
    ]
    
    sharding.state-store-mode = ddata
    run-coordinated-shutdown-when-down = off
  }
  
  extensions = ["akka.cluster.ddata.DistributedData"]
}

application {
  name = stocks
  exposed-port = 8080
  timeout-millis = 3000
}

clustering {
  ip = "127.0.0.1"
  port = 2551
}